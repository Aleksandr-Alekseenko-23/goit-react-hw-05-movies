{"version":3,"file":"static/js/387.17ed7b90.chunk.js","mappings":"4QAEMA,EAAM,mCAIL,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBC,IAAM,sBAAuB,CAClDC,OAAQ,CACNC,QAASJ,EACTK,KAAM,MAJL,cACCC,EADD,yBAOEA,EAASC,KAAKC,SAPhB,kEAUA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,uFACkBR,IAAM,uBAAD,OAAwBQ,GAAc,CAChEP,OAAQ,CACNC,QAASJ,EACTK,KAAM,MAJL,cACCC,EADD,yBAOEA,EAASC,KAAKC,SAPhB,kEASA,SAAeG,EAAtB,kC,aAAO,O,oBAAA,WAAwBC,GAAxB,uFAAiCC,EAAjC,+BAAwC,QACzCC,EAAU,GADT,KAEGD,EAFH,OAGE,UAHF,OAME,YANF,OASE,YATF,sCAaDC,EAAO,gBAAYF,GAblB,mCAODE,EAAO,gBAAYF,EAAZ,YAPN,mCAUDE,EAAO,gBAAYF,EAAZ,YAVN,iCAiBDE,EAjBC,kCAkBoBZ,IAAMY,EAAS,CACpCX,OAAQ,CACNC,QAASJ,KApBV,eAkBGM,EAlBH,yBAuBIA,EAASC,MAvBb,oEArBPL,IAAAA,SAAAA,QAAyB,+B,uHCFZa,EAAOC,EAAAA,GAAAA,GAAH,iGAOJC,EAAOD,EAAAA,GAAAA,GAAH,qHAMJE,EAAQF,EAAAA,GAAAA,IAAH,kGAOLG,EAAOH,EAAAA,GAAAA,EAAH,oRAaJI,EAAUJ,EAAAA,GAAAA,KAAH,8D,mBCCpB,MA/BA,WACE,IAAMK,GAAQC,EAAAA,EAAAA,MAEd,OACE,8BACGD,IACC,SAACN,EAAD,UACGM,EAAME,KAAKC,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,UAAWC,EAAS,EAATA,GAChD,OACE,UAACX,EAAD,YACE,SAACC,EAAD,CACEW,IACEH,EAAY,6CAC8BA,GACtCI,EAENC,IAAKN,KAEP,SAACN,EAAD,UAAOM,KACP,UAACN,EAAD,yBACY,SAACC,EAAD,UAAUO,SAXbC,EAed,OAKV,C,gLC9BYI,EAAgB,WAC3B,IAAQpB,GAAYqB,EAAAA,EAAAA,MAAZrB,QACR,GAA0BsB,EAAAA,EAAAA,UAAS,MAAnC,eAAOb,EAAP,KAAcc,EAAd,KAUA,OARAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,+FACQzB,EAAAA,EAAAA,IAASC,GAASyB,MAAK,SAAAC,GAC3BH,EAASG,EACV,IAHH,4CADc,sBAMV1B,GANW,WAAD,wBAMD2B,EACd,GAAE,CAAC3B,IACGS,CACR,EACYC,EAAuB,WAClC,IAAQV,GAAYqB,EAAAA,EAAAA,MAAZrB,QACR,GAA0BsB,EAAAA,EAAAA,UAAS,MAAnC,eAAOb,EAAP,KAAcc,EAAd,KAQA,OANAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,+FACQzB,EAAAA,EAAAA,IAASC,EAAS,WAAQyB,KAAKF,GADvC,4CADc,sBAIVvB,GAJW,WAAD,wBAID2B,EACd,GAAE,CAAC3B,IACGS,CACR,EAEYmB,EAAuB,WAClC,IAAQ5B,GAAYqB,EAAAA,EAAAA,MAAZrB,QACR,GAA0BsB,EAAAA,EAAAA,UAAS,MAAnC,eAAOb,EAAP,KAAcc,EAAd,KAQA,OANAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,+FACQzB,EAAAA,EAAAA,IAASC,EAAS,WAAWyB,KAAKF,GAD1C,4CADc,sBAIVvB,GAJW,WAAD,wBAID2B,EACd,GAAE,CAAC3B,IACGS,CACR,C","sources":["api/api.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","hooks/useFetchMovie.js"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = 'b2380104f6a4d3099e2f62e25dfd4988';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport async function fetchTreending() {\n  const response = await axios('/trending/movie/day', {\n    params: {\n      api_key: KEY,\n      size: 20,\n    },\n  });\n  return response.data.results;\n}\n\nexport async function fetchMovies(movieTitle) {\n  const response = await axios(`/search/movie?query=${movieTitle}`, {\n    params: {\n      api_key: KEY,\n      size: 20,\n    },\n  });\n  return response.data.results;\n}\nexport async function getMovie(movieId, path = 'movie') {\n  let pathUrl = '';\n  switch (path) {\n    case 'movie':\n      pathUrl = `movie/${movieId}`;\n      break;\n    case 'çast':\n      pathUrl = `movie/${movieId}/credits`;\n      break;\n    case 'reviews':\n      pathUrl = `movie/${movieId}/reviews`;\n      break;\n    default:\n      pathUrl = `movie/${movieId}`;\n      break;\n  }\n\n  if (pathUrl) {\n    const response = await axios(pathUrl, {\n      params: {\n        api_key: KEY,\n      },\n    });\n    return response.data;\n  }\n}\n\n// export async function fetchMoviesById(movieId) {\n// const response = await axios(`movie/${movieId}`, {\n//   params: {\n//     api_key: KEY,\n//   },\n// });\n// return response.data;\n// }\n\n// export async function fetchMoviesByIdCredits(movieId) {\n//   const response = await axios(`movie/${movieId}/credits`, {\n//     params: {\n//       api_key: KEY,\n//     },\n//   });\n//   return response.data;\n// }\n\n// export async function fetchMoviesByIdReviews(movieId) {\n//   const response = await axios(`movie/${movieId}/reviews`, {\n//     params: {\n//       api_key: KEY,\n//     },\n//   });\n//   return response.data;\n// }\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n  margin-top: 30px;\n`;\n\nexport const Item = styled.li`\n  flex-basis: calc(((100% - ((5) - 1) * 30px)) / 5);\n  margin-right: 0px;\n  flex-grow: 1;\n`;\n\nexport const Image = styled.img`\n  display: block;\n  width: 100%;\n  /* height: 100%; */\n  margin: 0px;\n`;\n\nexport const Text = styled.p`\n  text-align: center;\n  margin: 0px;\n  background-color: black;\n  border-bottom: 1px solid white;\n  border-left: 1px solid white;\n  border-right: 1px solid white;\n  color: white;\n  list-style: none;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`;\n\nexport const SubText = styled.span`\n  color: white;\n  margin-left: 5px;\n`;\n","import React from 'react';\nimport { useFetchMovieCredits } from 'hooks/useFetchMovie';\nimport { List, Item, Image, Text, SubText } from './Cast.styled';\nimport imageAs from '../../assets/img/NoPhotos.png';\n\nfunction Cast() {\n  const movie = useFetchMovieCredits();\n\n  return (\n    <>\n      {movie && (\n        <List>\n          {movie.cast.map(({ name, profile_path, character, id }) => {\n            return (\n              <Item key={id}>\n                <Image\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/original${profile_path}`\n                      : imageAs\n                  }\n                  alt={name}\n                />\n                <Text>{name}</Text>\n                <Text>\n                  Character:<SubText>{character}</SubText>\n                </Text>\n              </Item>\n            );\n          })}\n        </List>\n      )}\n    </>\n  );\n}\n\nexport default Cast;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovie } from 'api/api';\n\nexport const useFetchMovie = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n\n  useEffect(() => {\n    async function getIm() {\n      await getMovie(movieId).then(res => {\n        setMovie(res);\n      });\n    }\n    if (movieId) getIm();\n  }, [movieId]);\n  return movie;\n};\nexport const useFetchMovieCredits = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n\n  useEffect(() => {\n    async function getIm() {\n      await getMovie(movieId, 'çast').then(setMovie);\n    }\n    if (movieId) getIm();\n  }, [movieId]);\n  return movie;\n};\n//\nexport const useFetchMovieReviews = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n\n  useEffect(() => {\n    async function getIm() {\n      await getMovie(movieId, 'reviews').then(setMovie);\n    }\n    if (movieId) getIm();\n  }, [movieId]);\n  return movie;\n};\n"],"names":["KEY","fetchTreending","axios","params","api_key","size","response","data","results","fetchMovies","movieTitle","getMovie","movieId","path","pathUrl","List","styled","Item","Image","Text","SubText","movie","useFetchMovieCredits","cast","map","name","profile_path","character","id","src","imageAs","alt","useFetchMovie","useParams","useState","setMovie","useEffect","then","res","getIm","useFetchMovieReviews"],"sourceRoot":""}